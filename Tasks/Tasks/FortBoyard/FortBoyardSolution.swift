//
//  FortBoyardSolution.swift
//  Tasks
//
//  Created by Nail Sharipov on 27.02.2021.
//

/*
    Оригинальная задача. https://youtu.be/f_ABIK7G3yM?t=2927
    На столе лежат палочки (20 со старта), за раз можно взять 1, 2 или 3 палочки. Игроки ходят по очереди. Проигрывает тот кто берет последнюю палочку.
    Разработать алгоритм приводящий к победе.
 
    Общая задача.
    На доске n палочек. За ход разрешается взять a1, a2, ... ak палочек (например [1, 3, 7]). Проигрывает тот кто делает последним ход.
    Если на столе остались палочки и игрок не может сделать ход значит он победил, в этом случаи следует вернуть 0. Например, на столе 2 палочки и возможные ходы: [3, 5, 11].
 
    (Замечание *)
    Если игроку доступен ход он обязан ходить.
*/

protocol FortBoyardOriginalSolution {
    
    /// Вернуть ход приводящий к победе, если такого хода нет вернуть nil.
    /// - Parameters:
    ///   - count: текущее количество палочек на доске
    func nextMove(count: Int) -> Int?
}

protocol FortBoyardCommonSolution {
    
    /// Вернуть ход приводящий к победе, если возможных ходов несколько вернуть любой доступный, если такого хода нет вернуть nil. Нужно вернуть само значение, а не индекс из массива possibleMoves
    /// - Parameters:
    ///   - count: текущее количество палочек на доске
    ///   - possibleMoves: массив возможных ходов
    func nextMove(count: Int, possibleMoves: [Int]) -> Int?
}
